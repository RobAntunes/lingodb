name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Lingo Database v${{ steps.get_version.outputs.VERSION }}
          
          ### ðŸš€ What's New
          - Revolutionary 3D spatial linguistic database
          - High-performance Rust core with WASM bindings
          - TypeScript/JavaScript API with fluent query builder
          - Standard English database with 90% vocabulary coverage
          
          ### ðŸ“¦ Installation
          
          **Rust:**
          ```bash
          cargo add lingo-db
          ```
          
          **JavaScript/TypeScript:**
          ```bash
          npm install @lingo/core
          ```
          
          ### ðŸ”§ Quick Start
          
          ```typescript
          import { LingoDatabase, QueryBuilder } from '@lingo/core';
          
          const db = new LingoDatabase();
          await db.loadStandardEnglish();
          
          const query = QueryBuilder.find("tech")
            .layerUp()
            .similar(0.8)
            .limit(10);
          
          const results = await db.execute(query);
          console.log(`Found ${results.nodes.length} related terms`);
          ```
          
          ### ðŸ“„ Documentation
          
          - [API Documentation](https://docs.rs/lingo-db)
          - [JavaScript Guide](https://github.com/RobAntunes/lingodb/tree/main/js)
          - [Examples](https://github.com/RobAntunes/lingodb/tree/main/examples)
          
          ### ðŸ”’ License
          
          Licensed under the [Functional Source License v1.1](https://github.com/RobAntunes/lingodb/blob/main/LICENSE) with Apache 2.0 conversion after 2 years.
        draft: false
        prerelease: false

  build-release-assets:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: create-release
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lingo-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: lingo-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: lingo-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: lingo-macos-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C target/${{ matrix.target }}/release lingo
    
    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a ${{ matrix.artifact_name }}.zip target/${{ matrix.target }}/release/lingo.exe
    
    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}.tar.gz
        asset_name: ${{ matrix.artifact_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}.zip
        asset_name: ${{ matrix.artifact_name }}.zip
        asset_content_type: application/zip

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
    
    - name: Publish to crates.io
      run: cargo publish --allow-dirty

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WASM bindings
      run: |
        wasm-pack build --target nodejs --out-dir js/pkg
        chmod +x build-js.sh
        ./build-js.sh
    
    - name: Install JS dependencies
      run: |
        cd js
        npm ci
    
    - name: Build TypeScript
      run: |
        cd js
        npm run build
    
    - name: Update package version
      run: |
        cd js
        VERSION=${GITHUB_REF#refs/tags/v}
        npm version $VERSION --no-git-tag-version
    
    - name: Publish to npm
      run: |
        cd js
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-premium-features:
    name: Deploy Premium Features
    runs-on: ubuntu-latest
    needs: [publish-crate, publish-npm]
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Premium Services
      run: |
        echo "ðŸš€ Deploying premium features..."
        echo "âœ… AI enhancement API"
        echo "âœ… Multi-language models"
        echo "âœ… Domain specializations"
        echo "âœ… Analytics dashboard"
        echo "Premium features deployed successfully!"
      # Add actual deployment steps here when ready